{"version":3,"sources":["components/navbar.js","components/recordList.js","components/edit.js","components/create.js","App.js","index.js"],"names":["Navbar","className","to","class","type","id","Record","props","record","author","motd","_id","onClick","deleteRecord","RecordList","useState","records","setRecords","fetch","method","newRecords","filter","el","useEffect","response","ok","message","statusText","window","alert","json","getRecords","length","style","marginTop","map","Edit","level","form","setForm","params","useParams","navigate","useNavigate","updateForm","value","prev","e","preventDefault","editedPerson","body","JSON","stringify","headers","toString","fetchData","onSubmit","htmlFor","onChange","target","Create","randid","newPerson","catch","error","App","margin","exact","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.091a7393.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// We import bootstrap to make our application look better.\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n// We import NavLink to utilize the react router.\r\nimport { NavLink } from \"react-router-dom\";\r\nimport './style.css';\r\n\r\n\r\n// Here, we display our Navbar\r\nexport default function Navbar() {\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <NavLink className=\"navbar-brand\" to=\"/\">\r\n      {/*   <img id=\"boticon\"style={{\"width\" : 5 + '%'}} alt=\"icon\" src=\"https://previews.123rf.com/images/makc76/makc761709/makc76170900058/86223168-icono-de-bot-de-chat-esquema-robot-firmar-en-c%C3%ADrculo-azul-ilustraci%C3%B3n-vectorial-bot-de-servicio-de-s.jpg\"></img>*/}\r\n        <h3 class=\"d-inline-block align-text-middle\" >MOTD List</h3></NavLink>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav ml-auto\">\r\n            <li className=\"nav-item\">\r\n              <NavLink className=\"nav-link\" to=\"/create\"><h3 id=\"createmotdlink\">\r\n                Create New Motd</h3>\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Record = (props) => (\r\n  <tr>\r\n    <td>{props.record.author}</td>\r\n    <td>{props.record.motd}</td>\r\n    {/*<td>{props.record.level}</td>*/}\r\n    <td>\r\n      <Link className=\"btn btn-link\" to={`/edit/${props.record._id}`}>Edit</Link> |\r\n      <button className=\"btn btn-link\"\r\n        onClick={() => {\r\n          props.deleteRecord(props.record._id);\r\n        }}\r\n      >\r\n        Delete\r\n      </button>\r\n    </td>\r\n  </tr>\r\n);\r\n\r\n\r\nexport default function RecordList() {\r\n  const [records, setRecords] = useState([]);\r\n\r\n  // This method fetches the records from the database.\r\n  useEffect(() => {\r\n    async function getRecords() {\r\n      const response = await fetch(`http://localhost:5000/record/`);\r\n\r\n      if (!response.ok) {\r\n        const message = `An error occured: ${response.statusText}`;\r\n        window.alert(message);\r\n        return;\r\n      }\r\n\r\n      const records = await response.json();\r\n      setRecords(records);\r\n    }\r\n\r\n    getRecords();\r\n\r\n    return; \r\n  }, [records.length]);\r\n  // console.log(records[2])\r\n  // This method will delete a record\r\n  async function deleteRecord(id) {\r\n    await fetch(`http://localhost:5000/${id}`, {\r\n      method: \"DELETE\"\r\n    });\r\n\r\n    const newRecords = records.filter((el) => el._id !== id);\r\n    setRecords(newRecords);\r\n  }\r\n\r\n  // This method will map out the records on the table\r\n  function recordList() {\r\n    return records.map((record) => {\r\n      return (\r\n        <Record\r\n          record={record}\r\n          deleteRecord={() => deleteRecord(record._id)}\r\n          key={record._id}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  // This following section will display the table with the records of individuals.\r\n  return (\r\n    <div>\r\n      <table className=\"table table-striped\" style={{ marginTop: 0 }}>\r\n        <thead>\r\n          <tr>\r\n            <th>Author</th>\r\n            <th>Motd</th>\r\n        {/*}    <th>Level</th>*/}\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{recordList()}</tbody>\r\n        \r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router\";\r\n\r\nexport default function Edit() {\r\n  const [form, setForm] = useState({\r\n    author: \"\",\r\n    motd: \"\",\r\n    level: \"\",\r\n    records: [],\r\n  });\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const id = params.id.toString();\r\n      const response = await fetch(`http://localhost:5000/record/${params.id.toString()}`);\r\n\r\n      if (!response.ok) {\r\n        const message = `An error has occured: ${response.statusText}`;\r\n        window.alert(message);\r\n        return;\r\n      }\r\n\r\n      const record = await response.json();\r\n      if (!record) {\r\n        window.alert(`Record with id ${id} not found`);\r\n        navigate(\"/\");\r\n        return;\r\n      }\r\n\r\n      setForm(record);\r\n    }\r\n\r\n    fetchData();\r\n\r\n    return;\r\n  }, [params.id, navigate]);\r\n\r\n  // These methods will update the state properties.\r\n  function updateForm(value) {\r\n    return setForm((prev) => {\r\n      return { ...prev, ...value };\r\n    });\r\n  }\r\n\r\n  async function onSubmit(e) {\r\n    e.preventDefault();\r\n    const editedPerson = {\r\n      author: form.author,\r\n      motd: form.motd,\r\n      level: form.level,\r\n    };\r\n\r\n    // This will send a post request to update the data in the database.\r\n    await fetch(`http://localhost:5000/update/${params.id}`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(editedPerson),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n    });\r\n\r\n    navigate(\"/\");\r\n  }\r\n\r\n  // This following section will display the form that takes input from the user to update the data.\r\n  return (\r\n    <div>\r\n      <h3>Update MOTD</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"authot\">Author: </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"author\"\r\n            value={form.author}\r\n            onChange={(e) => updateForm({ author: e.target.value })}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"motd\">MOTD: </label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"motd\"\r\n            value={form.motd}\r\n            onChange={(e) => updateForm({ motd: e.target.value })}\r\n          />\r\n        </div>\r\n       {/* <div className=\"form-group\">\r\n          <div className=\"form-check form-check-inline\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"radio\"\r\n              name=\"positionOptions\"\r\n              id=\"positionIntern\"\r\n              value=\"Intern\"\r\n              checked={form.level === \"Intern\"}\r\n              onChange={(e) => updateForm({ level: e.target.value })}\r\n            />\r\n            <label htmlFor=\"positionIntern\" className=\"form-check-label\">Intern</label>\r\n          </div>\r\n          <div className=\"form-check form-check-inline\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"radio\"\r\n              name=\"positionOptions\"\r\n              id=\"positionJunior\"\r\n              value=\"Junior\"\r\n              checked={form.level === \"Junior\"}\r\n              onChange={(e) => updateForm({ level: e.target.value })}\r\n            />\r\n            <label htmlFor=\"positionJunior\" className=\"form-check-label\">Junior</label>\r\n          </div>\r\n          <div className=\"form-check form-check-inline\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"radio\"\r\n              name=\"positionOptions\"\r\n              id=\"positionSenior\"\r\n              value=\"Senior\"\r\n              checked={form.level === \"Senior\"}\r\n              onChange={(e) => updateForm({ level: e.target.value })}\r\n            />\r\n            <label htmlFor=\"positionSenior\" className=\"form-check-label\">Senior</label>\r\n        </div>\r\n        </div>\r\n        <br />\r\n  */}\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Update MOTD\"\r\n            className=\"btn btn-primary\"\r\n          />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst x = 1\r\n\r\nexport default function Create() {\r\n  const [form, setForm] = useState({\r\n    author: \"\",\r\n    motd: \"\",\r\n    level: \"\",\r\n    randid: x,\r\n  });\r\n  const navigate = useNavigate();\r\n\r\n  // These methods will update the state properties.\r\n  function updateForm(value) {\r\n    return setForm((prev) => {\r\n      return { ...prev, ...value };\r\n    });\r\n  }\r\n\r\n  // This function will handle the submission.\r\n  async function onSubmit(e) {\r\n    e.preventDefault();\r\n    \r\n\r\n    // When a post request is sent to the create url, we'll add a new record to the database.\r\n    const newPerson = { ...form };\r\n\r\n    await fetch(\"http://localhost:5000/record/add\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newPerson),\r\n    })\r\n    .catch(error => {\r\n      window.alert(error);\r\n      return;\r\n    });\r\n\r\n    setForm({ author: \"\", motd: \"\", level: \"\", randid: \"\" });\r\n    navigate(\"/\");\r\n  }\r\n\r\n  // This following section will display the form that takes the input from the user.\r\n  return (\r\n    <div>\r\n      <h3>Create New MOTD</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"author\">Author</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"author\"\r\n            value={form.author}\r\n            onChange={(e) => updateForm({ author: e.target.value })}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"motd\">MOTD</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"motd\"\r\n            value={form.motd}\r\n            onChange={(e) => updateForm({ motd: e.target.value })}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n      {/*    <div className=\"form-check form-check-inline\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"radio\"\r\n              name=\"positionOptions\"\r\n              id=\"positionIntern\"\r\n              value=\"Intern\"\r\n              checked={form.level === \"Intern\"}\r\n              onChange={(e) => updateForm({ level: e.target.value })}\r\n            />\r\n            <label htmlFor=\"positionIntern\" className=\"form-check-label\">Intern</label>\r\n          </div>\r\n          <div className=\"form-check form-check-inline\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"radio\"\r\n              name=\"positionOptions\"\r\n              id=\"positionJunior\"\r\n              value=\"Junior\"\r\n              checked={form.level === \"Junior\"}\r\n              onChange={(e) => updateForm({ level: e.target.value })}\r\n            />\r\n            <label htmlFor=\"positionJunior\" className=\"form-check-label\">Junior</label>\r\n          </div>\r\n          <div className=\"form-check form-check-inline\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"radio\"\r\n              name=\"positionOptions\"\r\n              id=\"positionSenior\"\r\n              value=\"Senior\"\r\n              checked={form.level === \"Senior\"}\r\n              onChange={(e) => updateForm({ level: e.target.value })}\r\n            />\r\n            <label htmlFor=\"positionSenior\" className=\"form-check-label\">Senior</label>\r\n  </div>*/}\r\n        </div> \r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Create MOTD\"\r\n            className=\"btn btn-primary\"\r\n          />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\n// We use Route in order to define the different routes of our application\r\nimport { Route, Routes } from \"react-router-dom\";\r\n\r\n// We import all the components we need in our app\r\nimport Navbar from \"./components/navbar\";\r\nimport RecordList from \"./components/recordList\";\r\nimport Edit from \"./components/edit\";\r\nimport Create from \"./components/create\";\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <div style={{ margin: 50 }}>\r\n      <Routes>\r\n        <Route exact path=\"/\" element={<RecordList />} />\r\n        <Route path=\"/edit/:id\" element={<Edit />} />\r\n        <Route path=\"/create\" element={<Create />} />\r\n      </Routes>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport './index.css';\r\n\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}